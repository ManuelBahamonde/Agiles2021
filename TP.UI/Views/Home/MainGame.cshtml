@model GameInfoModel
@{
    ViewData["Title"] = "Ahorcado";
}

<div>
    <div class="card text-center">
        <div class="card-header">
            <div class="card-title">Game Information</div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <p>Player Name: @Model.Name</p>
                </div>
                <div class="col">
                    <p>Difficulty: @Model.Difficulty</p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p>Attempts Left: @Model.AttemptsLeft</p>
                </div>
                <div class="col">
                    <p># of Incorrect Chars: @Model.IncorrectChars.Count</p>
                </div>
            </div>
        </div>
    </div>
    <div class="card text-center">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <div class="row">
                        <div class="col">
                            <canvas id="hangman-canvas" width="679" height="290"></canvas>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <p class="text-lg-center">Result: @Model.Result</p>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="row">
                        <div class="col">
                            <p>Probar palabra</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <p>Probar Letra</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const drawHangman = () => {
        const attemptsLeft = @Model.AttemptsLeft;

        var canvas = document.getElementById("hangman-canvas");
        var c = canvas.getContext('2d');

        // Reset Canvas and set its basic styles
        canvas.width = canvas.width;
        c.lineWidth = 10;
        c.strokeStyle = 'black';
        c.font = 'bold 24px Optimer, Arial, Helvetica, sans-serif';
        c.fillStyle = 'red';

        // Ground
        drawLine(c, [20, 190], [180, 190]);

        if (attemptsLeft < 7) {
            // Upright
            c.strokeStyle = 'blue';
            drawLine(c, [30, 185], [30, 10]);

            // Arm of the Gallows
            c.lineTo(150, 10);
            c.stroke();
            if (attemptsLeft < 6) {
                c.strokeStyle = 'black';
                c.lineWidth = 3;
                // Rope
                drawLine(c, [145, 15], [145, 30]);

                // Head
                c.beginPath();
                c.moveTo(160, 45);
                c.arc(145, 45, 15, 0, (Math.PI / 180) * 360);
                c.stroke();
            }
            if (attemptsLeft < 5) {
                // Body
                drawLine(c, [145, 60], [145, 130]);
            }
            if (attemptsLeft < 4) {
                // Left arm
                drawLine(c, [145, 80], [110, 90]);
            }
            if (attemptsLeft < 3) {
                // Right arm
                drawLine(c, [145, 80], [180, 90]);
            }
            if (attemptsLeft < 2) {
                // Left leg
                drawLine(c, [145, 130], [130, 170]);
            }
            if (attemptsLeft < 1) {
                // Right leg and end game
                drawLine(c, [145, 130], [160, 170]);
                c.fillText('Game over', 45, 110);
            }
        }
    }

    const drawLine = (context, from, to) => {
        context.beginPath();
        context.moveTo(from[0], from[1]);
        context.lineTo(to[0], to[1]);
        context.stroke();
    }

    drawHangman();
</script>